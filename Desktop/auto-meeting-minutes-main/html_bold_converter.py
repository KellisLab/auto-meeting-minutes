#!/usr/bin/env python3
"""
html_bold_converter.py - Convert markdown-style bold formatting (**text**) to HTML bold tags (<b>text</b>)
in HTML summary files generated by the transcript processing pipeline.

This module can be used standalone or integrated with the fullpipeline.py script.
"""

import re
import os
import sys

def convert_bold_tags(html_content):
    """
    Convert markdown-style bold formatting (**text**) to HTML bold tags (<b>text</b>)
    specifically within <div class="topic-content"> sections.
    
    Args:
        html_content (str): The HTML content to convert
        
    Returns:
        str: Updated HTML content with proper bold tags
    """
    # Parse the HTML content to find topic-content divs
    # pattern = r'(<div class="topic-content">)(.*?)(</div>)'
    pattern = r'(<div class="(?:topic|topic-content)">)(.*?)(</div>)'
    
    def replace_content(match):
        div_start = match.group(1)
        content = match.group(2)
        div_end = match.group(3)
        
        # Replace **text** with <b>text</b> in the content section
        updated_content = re.sub(r'\*\*([^*]+?)\*\*', r'<b>\1</b>', content)
        
        return div_start + updated_content + div_end
    
    # Apply the replacement only in topic-content divs
    updated_html = re.sub(pattern, replace_content, html_content, flags=re.DOTALL)
    
    return updated_html

def process_html_file(input_file, output_file=None):
    """
    Process an HTML file to convert markdown bold formatting to HTML tags
    
    Args:
        input_file (str): Path to input HTML file
        output_file (str, optional): Path to output HTML file. If None, overwrites input.
        
    Returns:
        str: Path to the output file
    """
    if output_file is None:
        output_file = input_file
    
    try:
        # Read the input file
        with open(input_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Convert bold tags
        updated_html = convert_bold_tags(html_content)
        
        # Write the output
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(updated_html)
        
        return output_file
    
    except Exception as e:
        print(f"Error processing file: {e}", file=sys.stderr)
        raise

def process_md_file(input_file, output_file=None):
    """
    Process a Markdown file to convert meeting_summary_md file to use <b> tags
    instead of ** for bold formatting
    
    Args:
        input_file (str): Path to input MD file
        output_file (str, optional): Path to output MD file. If None, overwrites input.
        
    Returns:
        str: Path to the output file
    """
    if output_file is None:
        output_file = input_file
    
    try:
        # Read the input file
        with open(input_file, 'r', encoding='utf-8') as f:
            md_content = f.read()
        
        # Convert bold tags in content sections, preserving headers
        lines = md_content.split('\n')
        in_content = False
        for i in range(len(lines)):
            # Skip header lines with ** that we want to preserve
            if lines[i].startswith('**') and ' - ' in lines[i] and '**' in lines[i][:40]:
                continue
            
            # Convert ** to <b> in content lines
            lines[i] = re.sub(r'\*\*([^*]+?)\*\*', r'<b>\1</b>', lines[i])
            
        # Join the lines back together
        updated_md = '\n'.join(lines)
        
        # Write the output
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(updated_md)
        
        return output_file
    
    except Exception as e:
        print(f"Error processing markdown file: {e}", file=sys.stderr)
        raise

# Main function if run as standalone script
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Convert markdown-style bold formatting to HTML bold tags in summary files'
    )
    parser.add_argument('input', help='Input HTML or MD file')
    parser.add_argument('output', nargs='?', help='Output file (optional)')
    parser.add_argument('--markdown', action='store_true', help='Process a Markdown file instead of HTML')
    
    args = parser.parse_args()
    
    try:
        if args.markdown:
            output_file = process_md_file(args.input, args.output)
        else:
            output_file = process_html_file(args.input, args.output)
        print(f"Successfully converted bold tags in {args.input} -> {output_file}")
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)